@page "/"
@using DesafioAxians.Models

<FormActions PublicarHabilitado="@PodePublicar" OnPublicar="Publicar" />

<div class="container-fluid mt-5 mx-auto" style="width: 94%; max-width: 1720px;">
    <div class="col-12 gap-4 flex-col d-md-flex flex-md-row m-auto">
        <div class="col-md-4 col-md-4 col-lg-3 mb-3">
            <Sidebar 
                CurrentStep="@currentStep" 
                OnStepChange="SetCurrentStep"
                OpcoesSalvas="@opcoesSalvas" 
            />

        </div>

        <div class="col-md-8 col-md-8 col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-2">
                <h4 class="mb-0">Opção @currentStep</h4>

                <div class="m-auto m-md-0 d-flex justify-content-end align-items-center gap-4">
                    <button class="d-flex align-items-center gap-2 border-0 bg-transparent"
                        style="font-weight: 600; color: #6c757d;">
                        <div class="rounded-circle d-flex justify-content-center align-items-center"
                            style="background-color: #DFDDFC; width: 36px; height: 36px;">
                            <img src="Icons/angle-left-menu.png" width="14" />
                        </div>
                        ANTERIOR
                    </button>

                    <button class="d-flex align-items-center gap-2 border-0 bg-transparent"
                        style="font-weight: 600; color: #6c757d;">
                        SEGUINTE
                        <div class="rounded-circle d-flex justify-content-center align-items-center"
                            style="background-color: #DFDDFC; width: 36px; height: 36px;">
                            <img src="Icons/angle-right-menu.png" width="14" />
                        </div>
                    </button>
                </div>
            </div>

            <div style="margin-bottom: 20px; margin-top: -5px; color: #6057EE; font-size: 14px;">
                <span>* Campos de preenchimento obrigatório</span>
            </div>

            <TaxForm @ref="formRef" OnContarChanged="AtualizarContarSelecionado" />
            <TaxTable @ref="tableRef" Taxas="@taxas" OnSelecionar="AtualizarSelecao" />
        </div>
    </div>

    <FooterActions Selecionadas="@taxasSelecionadas" OnCancelar="OnCancelar" OnEliminar="OnEliminar" />
</div>

@code {
    private int currentStep = 1;
    private string contarSelecionado = "";
    private TaxForm? formRef;
    private TaxTable? tableRef;
    private List<Opcao> opcoesSalvas = new();

    private List<Taxa> taxas = new()
    {
    new("Norte", "Área Metropolitana", "Braga", 7.5m),
    new("Norte", "Área Metropolitana", "Braga", 7.5m),
    new("Norte", "Área Metropolitana", "Braga", 7.5m),
    new("Norte", "Área Metropolitana", "Braga", 7.5m),
    };

    private int taxasSelecionadas => taxas.Count(t => t.Selecionada);

    private Task AtualizarContarSelecionado(string valor)
    {
        contarSelecionado = valor;
        return Task.CompletedTask;
    }

    private Task AtualizarSelecao()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnCancelar()
    {
        foreach (var t in taxas)
            t.Selecionada = false;

        return AtualizarSelecao();
    }

    private Task OnEliminar()
    {
        taxas = taxas.Where(t => !t.Selecionada).ToList();
        return AtualizarSelecao();
    }

    private async Task SetCurrentStep(int step)
    {
        currentStep = step;

        if (step <= opcoesSalvas.Count)
        {
            var opcao = opcoesSalvas[step - 1];

            if (formRef is not null && tableRef is not null)
            {
                await formRef.Carregar(opcao);
                tableRef.Carregar(opcao);
            }
        }
    }

    private async Task Publicar()
    {
        if (formRef is null || tableRef is null)
            return;

        var novaOpcao = new Opcao
        {
            ContarSelecionado = formRef.ContarSelecionado,
            TipoTaxa = formRef.SelectedTaxType,
            TaxaLocalizacao = tableRef.TaxaPorLocalizacao,
            Taxas = tableRef.TaxasSelecionadas.ToList()
        };

        opcoesSalvas.Add(novaOpcao); // armazena na lista

        currentStep++;

        formRef.Resetar();
        taxas.Clear();
        contarSelecionado = "";

        await AtualizarSelecao();
    }
    private bool PodePublicar =>
    !string.IsNullOrWhiteSpace(contarSelecionado) &&
    taxas.Any();
}
