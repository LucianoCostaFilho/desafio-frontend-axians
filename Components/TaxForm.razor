@using System.ComponentModel.DataAnnotations
@using DesafioAxians.Models

<!-- Tipo de taxa -->
<div class="section-box mb-4" style="padding: 32px; box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;">
    <label class="form-label section-title" style="margin-top: -8px;">Tipo de taxa</label>
    <p class="section-subtitle" style="margin-top: 12px;">Adicionar tipo de taxa</p>

    <select class="form-select custom-select" style="margin-top: 20px; width: 157px;" @bind="SelectedTaxType ">
        <option disabled selected>Selecionar</option>
        @foreach (var tax in TaxTypes)
        {
            <option>@tax</option>
        }
    </select>
</div>

<!-- Contar -->
<div class="counter-box mb-4">
    <div style="padding: 32px 32px 55px 32px; box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;">
        <label class="form-label fw-semibold d-block" style="color: #686C73; font-size: 20px;">Contar *</label>

        <InputRadioGroup TValue="string"
                         Value="@Model.ContarSelecionado"
                         ValueChanged="AtualizarContar"
                         ValueExpression="() => Model.ContarSelecionado"
                         class="form-check form-check-inline">
            @foreach (var opcao in Opcoes)
            {
                <div class="form-check form-check-inline me-4">
                    <InputRadio TValue="string" class="form-check-input" Value="@opcao" />
                    <label class="form-check-label">@opcao</label>
                </div>
            }
        </InputRadioGroup>
    </div>
</div>

@code {
    [Parameter] public EventCallback<string> OnContarChanged { get; set; }

    public string ContarSelecionado => Model.ContarSelecionado ?? "";
    public string SelectedTaxType { get; set; } = "NUTS";

    private Contar Model { get; set; } = new();
    private List<string> TaxTypes = new() { "NUTS", "IVA", "ICMS", "ISS", "Outro" };
    private List<string> Opcoes => new() { "Sim", "NÃ£o" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(Model.ContarSelecionado))
        {
            await OnContarChanged.InvokeAsync(Model.ContarSelecionado);
        }
    }

    public void Resetar()
    {
        Model = new();
        SelectedTaxType  = "NUTS";
    }

    private async Task AtualizarContar(string value)
    {
        Model.ContarSelecionado = value;
        await OnContarChanged.InvokeAsync(value);
    }

    public Task Carregar(Opcao opcao)
    {
        Model.ContarSelecionado = opcao.ContarSelecionado;
        SelectedTaxType = opcao.TipoTaxa ?? "NUTS";
        return OnContarChanged.InvokeAsync(opcao.ContarSelecionado);
    }

}
