@using DesafioAxians.Models

<div class="card shadow-sm p-4 mb-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0">Lista de Taxas</h5>
        <button class="btn btn-primary btn-sm" @onclick="AdicionarTaxa">
            <i class="bi bi-plus-lg me-1"></i> Adicionar Taxa
        </button>
    </div>

    <table class="table table-hover align-middle">
        <thead class="table-light">
            <tr>
                <th scope="col">
                    <input type="checkbox" @onchange="ToggleSelecionarTodos" checked="@TodosSelecionados" />
                </th>
                <th scope="col">Tipo</th>
                <th scope="col">Valor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taxa in Taxas)
            {
                <tr>
                    <td>
                        <input type="checkbox" checked="@taxa.Selecionada" @onchange="() => ToggleTaxa(taxa)" />
                    </td>
                    <td>@taxa.Tipo</td>
                    <td>@taxa.Valor.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public List<Taxa> Taxas { get; set; } = new();
    [Parameter] public EventCallback OnSelecionar { get; set; }

    private bool TodosSelecionados => Taxas.All(t => t.Selecionada);

    private Task ToggleTaxa(Taxa taxa)
    {
        taxa.Selecionada = !taxa.Selecionada;
        return OnSelecionar.InvokeAsync();
    }

    private Task ToggleSelecionarTodos(ChangeEventArgs e)
    {
        var selecionar = (bool)e.Value;
        foreach (var t in Taxas)
        {
            t.Selecionada = selecionar;
        }
        return OnSelecionar.InvokeAsync();
    }

    private void AdicionarTaxa()
    {
        Taxas.Add(new Taxa("Outro", 7.5m));
        OnSelecionar.InvokeAsync();
    }
}
